<%= editing_warning_comment %>

name: CI/CD

on:
  workflow_dispatch: {}
  push:
    paths-ignore:
      - '**.md'
      - 'dev-handbook/**'

env:
  BINTRAY_ORG: fullstaq
  CI_ARTIFACTS_BUCKET: fullstaq-ruby-server-edition-ci-artifacts
  ## Set the following variable to a specific number to make the
  ## Google Cloud artifact upload/download actions treat as
  ## if we're running the given CI run number. Useful for
  ## speeding up development of the CI itself, in order to
  ## avoid rebuilding.
  CI_ARTIFACTS_RUN_NUMBER: ${{ github.run_number }}

jobs:
  check_workflow_uptodate:
    name: Check whether workflow is up-to-date
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.6'

      - name: Check
        run: ./internal-scripts/ci-cd/check-workflow-uptodate/check.sh
      - name: Show differences
        run: git diff --no-index --color .github/workflows/ci-cd.yml .github/workflows/ci-cd.yml.2
        if: '!cancelled() && failure()'


  check_version_numbers_need_bumping:
    name: Check whether any version numbers need to be changed
    needs:
      - download_rbenv_source
    runs-on: ubuntu-18.04
    # Run even if a dependent job has been skipped
    if: '!failure() && !cancelled()'
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.6'
      - name: Login to Google Cloud
        uses: ./.github/actions/gcloud-login
        with:
          private_key: ${{ secrets.GCLOUD_KEY }}
      - name: Fetch Rbenv source
        uses: ./.github/actions/download-artifact
        with:
          name: <%= rbenv_source_artifact_name %>
          path: .

      - name: Extract Rbenv source
        run: ./internal-scripts/ci-cd/check-version-numbers-need-changing/extract-rbenv-source.sh
      - name: Determine latest release tag
        # Sets environment variable $LATEST_RELEASE_TAG
        run: ./internal-scripts/ci-cd/check-version-numbers-need-changing/determine-latest-release-tag.sh

      - name: Check whether the Rbenv version in config.yml is correct
        run: ./internal-scripts/ci-cd/check-version-numbers-need-changing/check-rbenv-version.sh
        if: '!cancelled()'
      - name: Check whether the Rbenv package revision needs to be changed
        run: ./internal-scripts/ci-cd/check-version-numbers-need-changing/check-rbenv-package-revision.sh
        if: '!cancelled()'

      - name: Check whether the fullstaq-ruby-common Debian package version or revision needs to be changed
        run: ./internal-scripts/ci-cd/check-version-numbers-need-changing/check-common-deb-version-revision.sh
        if: '!cancelled()'
      - name: Check whether the fullstaq-ruby-common RPM package version or revision needs to be changed
        run: ./internal-scripts/ci-cd/check-version-numbers-need-changing/check-common-rpm-version-revision.sh
        if: '!cancelled()'

      - name: Check whether any Ruby package revisions need to be changed
        run: ./internal-scripts/ci-cd/check-version-numbers-need-changing/check-ruby-package-revisions.sh
        if: '!cancelled()'

      - name: Check whether any minor Ruby package revisions need to be changed
        run: ./internal-scripts/ci-cd/check-version-numbers-need-changing/check-minor-ruby-package-revisions.sh
        if: '!cancelled()'


  # Determines which jobs should be run, or (in case this is a re-run)
  # which jobs can be skipped this time because the last run succeeded.
  # We determine this by checking whether the artifacts produced by jobs
  # exist in this run.
  determine_necessary_jobs:
    name: Determine necessary jobs
    runs-on: ubuntu-20.04
    outputs:
      common-deb-needs-building: ${{ steps.check_common_deb.outputs.absent }}
      common-rpm-needs-building: ${{ steps.check_common_rpm.outputs.absent }}
      rbenv-deb-needs-building: ${{ steps.check_rbenv_deb.outputs.absent }}
      rbenv-rpm-needs-building: ${{ steps.check_rbenv_rpm.outputs.absent }}
      rbenv-src-needs-downloading: ${{ steps.check_rbenv_source.outputs.absent }}

      <%- ruby_source_versions.each do |ruby_version| %>
      <%- unindent(2) do -%>
        'ruby-src-<%= slug(ruby_version) %>-needs-downloading': '${{ steps.check_ruby_source_<%= slug(ruby_version) %>.outputs.absent }}'
      <%- end -%>
      <%- end %>

      <%- docker_images.each do |image| %>
      <%- unindent(2) do -%>
        'image-<%= slug(image[:id]) %>-needs-building': '${{ steps.prepare_image_<%= slug(image[:id]) %>.outputs.needs-building }}'
      <%- end -%>
      <%- end %>

      <%- distributions.each do |distribution| %>
      <%- unindent(2) do -%>
        'jemalloc-<%= slug(distribution[:name]) %>-needs-building': '${{ steps.check_jemalloc_<%= slug(distribution[:name]) %>.outputs.absent }}'

        <%- ruby_package_versions.each do |ruby_package_version| -%>
        <%- variants.each do |variant| -%>
        <%- unindent(2) do %>
          'ruby-<%= slug(distribution[:name]) %>-<%= slug(ruby_package_version[:id]) %>-<%= slug(variant[:name]) %>-needs-building': '${{ steps.check_ruby-<%= slug(distribution[:name]) %>-<%= slug(ruby_package_version[:id]) %>-<%= slug(variant[:name]) %>.outputs.absent }}'
        <%- end %>
        <%- end -%>
        <%- end -%>
      <%- end -%>
      <%- end %>
    steps:
      - uses: actions/checkout@v2
      - name: Login to Google Cloud
        uses: ./.github/actions/gcloud-login
        with:
          private_key: ${{ secrets.GCLOUD_KEY }}

      - name: List artifacts built in previous try of same CI run
        run: ./internal-scripts/ci-cd/determine-necessary-jobs/list-artifacts.sh
        env:
          CI_RUN_NUMBER: ${{ env.CI_ARTIFACTS_RUN_NUMBER || github.run_number }}

      - name: Determine whether common DEB needs to be built
        id: check_common_deb
        run: ./internal-scripts/ci-cd/determine-necessary-jobs/check-artifact-exists.rb
        env:
          NAME: <%= common_deb_artifact_name %>
      - name: Determine whether common RPM needs to be built
        id: check_common_rpm
        run: ./internal-scripts/ci-cd/determine-necessary-jobs/check-artifact-exists.rb
        env:
          NAME: <%= common_rpm_artifact_name %>
      - name: Determine whether Rbenv DEB needs to be built
        id: check_rbenv_deb
        run: ./internal-scripts/ci-cd/determine-necessary-jobs/check-artifact-exists.rb
        env:
          NAME: <%= rbenv_deb_artifact_name %>
      - name: Determine whether Rbenv RPM needs to be built
        id: check_rbenv_rpm
        run: ./internal-scripts/ci-cd/determine-necessary-jobs/check-artifact-exists.rb
        env:
          NAME: <%= rbenv_rpm_artifact_name %>

      - name: Determine whether Rbenv source needs to be downloaded
        id: check_rbenv_source
        run: ./internal-scripts/ci-cd/determine-necessary-jobs/check-artifact-exists.rb
        env:
          NAME: <%= rbenv_source_artifact_name %>

      <%- ruby_source_versions.each do |ruby_version| %>
      <%- unindent(2) do -%>
        - name: Determine whether Ruby source <%= ruby_version %> needs to be downloaded
          id: check_ruby_source_<%= slug(ruby_version) %>
          run: ./internal-scripts/ci-cd/determine-necessary-jobs/check-artifact-exists.rb
          env:
            NAME: <%= ruby_source_artifact_name(ruby_version) %>
      <%- end -%>
      <%- end %>

      <%- docker_images.each do |image| %>
      <%- unindent(2) do -%>
        - name: Determine whether Docker image for <%= image[:id] %> needs to be built
          id: 'prepare_image_<%= slug(image[:id]) %>'
          run: ./internal-scripts/ci-cd/build-docker-images/prepare.sh
          env:
            IMAGE_NAME: '<%= image[:name] %>'
            IMAGE_TAG: '<%= image[:tag] %>'
      <%- end -%>
      <%- end %>

      <%- distributions.each do |distribution| %>
      <%- unindent(2) do -%>
        - name: Determine whether Jemalloc [<%= distribution[:name] %>] needs to be built
          id: 'check_jemalloc_<%= slug(distribution[:name]) %>'
          run: ./internal-scripts/ci-cd/determine-necessary-jobs/check-artifact-exists.rb
          env:
            NAME: jemalloc-bin-<%= distribution[:name] %>

        <%- ruby_package_versions.each do |ruby_package_version| -%>
        <%- variants.each do |variant| -%>
        <%- unindent(2) do %>
          - name: Determine whether Ruby [<%= distribution[:name] %>/<%= ruby_package_version[:id] %>/<%= variant[:name] %>] needs to be built
            id: 'check_ruby-<%= slug(distribution[:name]) %>-<%= slug(ruby_package_version[:id]) %>-<%= slug(variant[:name]) %>'
            run: ./internal-scripts/ci-cd/determine-necessary-jobs/check-artifact-exists.rb
            env:
              NAME: <%= ruby_package_artifact_name(ruby_package_version, distribution, variant) %>
        <%- end %>
        <%- end -%>
        <%- end -%>
      <%- end -%>
      <%- end %>

  # Uncomment the following to debug the output of the
  # 'determine_necessary_jobs' job.

  # debug_determine_necessary_jobs:
  #   name: 'Debug "Determine necessary jobs" output'
  #   runs-on: ubuntu-20.04
  #   needs: determine_necessary_jobs
  #   steps:
  #     - run: echo "$JSON"
  #       env:
  #         JSON: ${{ toJSON(needs.determine_necessary_jobs.outputs) }}


  ### Docker images ###

  <%- docker_images.each do |image| %>
  <%- unindent(2) do -%>
    build_docker_image_<%= slug(image[:id]) %>:
      name: 'Build Docker image [<%= image[:id] %>]'
      runs-on: ubuntu-18.04
      needs: determine_necessary_jobs
      if: needs.determine_necessary_jobs.outputs.image-<%= slug(image[:id]) %>-needs-building == 'true'
      steps:
        - uses: actions/checkout@v2
        - name: Login to Google Cloud
          uses: ./.github/actions/gcloud-login
          with:
            private_key: ${{ secrets.GCLOUD_KEY }}

        - name: Prepare
          run: ./internal-scripts/ci-cd/build-docker-images/prepare.sh
          env:
            IMAGE_NAME: '<%= image[:name] %>'
            IMAGE_TAG: '<%= image[:tag] %>'

        - name: Build
          run: ./internal-scripts/ci-cd/build-docker-images/build.sh
          env:
            IMAGE_NAME: '<%= image[:name] %>'
            IMAGE_TAG: '<%= image[:tag] %>'
            SOURCE_DIR: 'environments/<%= image[:id] %>'

        - name: Dump image
          run: ./internal-scripts/ci-cd/build-docker-images/dump-image.sh
          env:
            IMAGE_NAME: '<%= image[:name] %>'
            IMAGE_TAG: '<%= image[:tag] %>'
        - name: Archive artifact
          uses: ./.github/actions/upload-artifact
          with:
            name: 'docker-image-<%= image[:id] %>'
            path: output
  <%- end %>
  <%- end %>


  ### Sources ###

  <%- ruby_source_versions.each do |ruby_version| %>
  <%- unindent(2) do -%>
    download_ruby_source_<%= slug(ruby_version) %>:
      name: Download Ruby source [<%= ruby_version %>]
      needs:
        - determine_necessary_jobs
      runs-on: ubuntu-18.04
      if: needs.determine_necessary_jobs.outputs.ruby-src-<%= slug(ruby_version) %>-needs-downloading == 'true'
      steps:
        - uses: actions/checkout@v2
        - name: Login to Google Cloud
          uses: ./.github/actions/gcloud-login
          with:
            private_key: ${{ secrets.GCLOUD_KEY }}

        - name: Fetch cache
          id: fetch_cache
          uses: actions/cache@v1
          with:
            path: output
            key: v3-ruby-src-<%= ruby_version %>

        - name: Download
          run: ./internal-scripts/ci-cd/download-ruby-sources/download.sh
          if: steps.fetch_cache.outputs.cache-hit != 'true'
          env:
            RUBY_VERSION: <%= ruby_version %>

        - name: Archive artifact
          uses: ./.github/actions/upload-artifact
          with:
            name: <%= ruby_source_artifact_name(ruby_version) %>
            path: output
  <%- end -%>
  <%- end %>


  download_rbenv_source:
    name: Download Rbenv source
    needs:
      - determine_necessary_jobs
    runs-on: ubuntu-18.04
    if: needs.determine_necessary_jobs.outputs.rbenv-src-needs-downloading == 'true'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.6'
      - name: Login to Google Cloud
        uses: ./.github/actions/gcloud-login
        with:
          private_key: ${{ secrets.GCLOUD_KEY }}
      - name: Prepare
        id: prepare
        run: ./internal-scripts/ci-cd/download-rbenv-source/prepare.sh
      - name: Fetch cache
        uses: actions/cache@v1
        with:
          path: output
          key: v2-rbenv-src-${{ steps.prepare.outputs.cache_key }}

      - name: Download
        run: ./internal-scripts/ci-cd/download-rbenv-source/download.sh
        env:
          RBENV_REPO_URL: ${{ steps.prepare.outputs.repo_url }}
          RBENV_REPO_REF: ${{ steps.prepare.outputs.ref }}

      - name: Archive artifact
        uses: ./.github/actions/upload-artifact
        with:
          name: <%= rbenv_source_artifact_name %>
          path: output


  ### Jemalloc ###

  <%- distributions.each do |distribution| %>
  <%- unindent(2) do -%>
    build_jemalloc_binary_<%= slug(distribution[:name]) %>:
      name: 'Build Jemalloc binary [<%= distribution[:name] %>]'
      needs:
        - 'determine_necessary_jobs'
        - 'build_docker_image_<%= slug(distribution[:name]) %>'
      runs-on: ubuntu-18.04
      # Run even if a dependent job has been skipped
      if: |
        needs.determine_necessary_jobs.outputs.jemalloc-<%= slug(distribution[:name]) %>-needs-building == 'true'
        && !failure() && !cancelled()
      steps:
        - uses: actions/checkout@v2
        - name: Login to Google Cloud
          uses: ./.github/actions/gcloud-login
          with:
            private_key: ${{ secrets.GCLOUD_KEY }}
        - name: Fetch cache
          uses: actions/cache@v1
          with:
            path: cache
            key: 'jemalloc-bin-<%= distribution[:name] %>-<%= jemalloc_version %>'
        - name: Create cache dir
          run: mkdir -p cache

        - name: Download Docker image necessary for building
          uses: ./.github/actions/download-artifact
          if: "needs.determine_necessary_jobs.outputs.image-<%= slug(distribution[:name]) %>-needs-building == 'true'"
          with:
            name: 'docker-image-<%= distribution[:name] %>'
            path: .
        - name: Load Docker image necessary for building
          run: ./internal-scripts/ci-cd/load-docker-image.sh
          if: "needs.determine_necessary_jobs.outputs.image-<%= slug(distribution[:name]) %>-needs-building == 'true'"
          env:
            TARBALL: image.tar.zst

        - name: Download source
          run: ./internal-scripts/ci-cd/build-jemalloc-binaries/download-source.sh
          env:
            JEMALLOC_VERSION: "<%= jemalloc_version %>"

        - name: Build
          run: ./internal-scripts/ci-cd/build-jemalloc-binaries/build.sh
          env:
            ENVIRONMENT_NAME: '<%= distribution[:name] %>'

        - name: Archive artifact
          uses: ./.github/actions/upload-artifact
          with:
            name: 'jemalloc-bin-<%= distribution[:name] %>'
            path: output
  <%- end -%>
  <%- end %>


  ### fullstaq-ruby-common ###

  build_common_deb:
    name: Build common DEB
    needs:
      - determine_necessary_jobs
      - build_docker_image_utility
    runs-on: ubuntu-18.04
    # Run even if a dependent job has been skipped
    if: |
      needs.determine_necessary_jobs.outputs.common-deb-needs-building == 'true'
      && !failure() && !cancelled()
    steps:
      - uses: actions/checkout@v2
      - name: Login to Google Cloud
        uses: ./.github/actions/gcloud-login
        with:
          private_key: ${{ secrets.GCLOUD_KEY }}

      - name: Download utility Docker image
        uses: ./.github/actions/download-artifact
        if: "needs.determine_necessary_jobs.outputs.image-utility-needs-building == 'true'"
        with:
          name: docker-image-utility
          path: .
      - name: Load utility Docker image
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: "needs.determine_necessary_jobs.outputs.image-utility-needs-building == 'true'"
        env:
          TARBALL: image.tar.zst

      - name: Build package
        run: ./internal-scripts/ci-cd/build-common-deb/build-package.sh
        env:
          PACKAGE_BASENAME: "<%= common_package_basename(:DEB) %>"
          VERSION: "<%= common_deb_version %>"
          REVISION: "<%= common_deb_package_revision %>"

      - name: Archive artifact
        uses: ./.github/actions/upload-artifact
        with:
          name: <%= common_deb_artifact_name %>
          path: output


  build_common_rpm:
    name: Build common RPM
    needs:
      - determine_necessary_jobs
      - build_docker_image_utility
    runs-on: ubuntu-18.04
    # Run even if a dependent job has been skipped
    if: |
      needs.determine_necessary_jobs.outputs.common-rpm-needs-building == 'true'
      && !failure() && !cancelled()
    steps:
      - uses: actions/checkout@v2
      - name: Login to Google Cloud
        uses: ./.github/actions/gcloud-login
        with:
          private_key: ${{ secrets.GCLOUD_KEY }}

      - name: Download utility Docker image
        uses: ./.github/actions/download-artifact
        if: "needs.determine_necessary_jobs.outputs.image-utility-needs-building == 'true'"
        with:
          name: docker-image-utility
          path: .
      - name: Load utility Docker image
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: "needs.determine_necessary_jobs.outputs.image-utility-needs-building == 'true'"
        env:
          TARBALL: image.tar.zst

      - name: Build package
        run: ./internal-scripts/ci-cd/build-common-rpm/build-package.sh
        env:
          PACKAGE_BASENAME: "<%= common_package_basename(:RPM) %>"
          VERSION: "<%= common_rpm_version %>"
          REVISION: "<%= common_rpm_package_revision %>"

      - name: Archive artifact
        uses: ./.github/actions/upload-artifact
        with:
          name: <%= common_rpm_artifact_name %>
          path: output


  ### Rbenv ###

  build_rbenv_deb:
    name: Build Rbenv DEB
    needs:
      - determine_necessary_jobs
      - download_rbenv_source
      - build_docker_image_utility
    runs-on: ubuntu-18.04
    # Run even if a dependent job has been skipped
    if: |
      needs.determine_necessary_jobs.outputs.rbenv-deb-needs-building == 'true'
      && !failure() && !cancelled()
    steps:
      - uses: actions/checkout@v2
      - name: Login to Google Cloud
        uses: ./.github/actions/gcloud-login
        with:
          private_key: ${{ secrets.GCLOUD_KEY }}

      - name: Fetch Rbenv source
        uses: ./.github/actions/download-artifact
        with:
          name: <%= rbenv_source_artifact_name %>
          path: .

      - name: Download utility Docker image
        uses: ./.github/actions/download-artifact
        if: "needs.determine_necessary_jobs.outputs.image-utility-needs-building == 'true'"
        with:
          name: docker-image-utility
          path: .
      - name: Load utility Docker image
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: "needs.determine_necessary_jobs.outputs.image-utility-needs-building == 'true'"
        env:
          TARBALL: image.tar.zst

      - name: Build package
        run: ./internal-scripts/ci-cd/build-rbenv-deb/build-package.sh
        env:
          PACKAGE_BASENAME: "<%= rbenv_package_basename(:DEB) %>"
          REVISION: "<%= rbenv_package_revision %>"

      - name: Archive artifact
        uses: ./.github/actions/upload-artifact
        with:
          name: <%= rbenv_deb_artifact_name %>
          path: output


  build_rbenv_rpm:
    name: Build Rbenv RPM
    needs:
      - determine_necessary_jobs
      - download_rbenv_source
      - build_docker_image_utility
    runs-on: ubuntu-18.04
    # Run even if a dependent job has been skipped
    if: |
      needs.determine_necessary_jobs.outputs.rbenv-rpm-needs-building == 'true'
      && !failure() && !cancelled()
    steps:
      - uses: actions/checkout@v2
      - name: Login to Google Cloud
        uses: ./.github/actions/gcloud-login
        with:
          private_key: ${{ secrets.GCLOUD_KEY }}

      - name: Fetch Rbenv source
        uses: ./.github/actions/download-artifact
        with:
          name: <%= rbenv_source_artifact_name %>
          path: .

      - name: Download utility Docker image
        uses: ./.github/actions/download-artifact
        if: "needs.determine_necessary_jobs.outputs.image-utility-needs-building == 'true'"
        with:
          name: docker-image-utility
          path: .
      - name: Load utility Docker image
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: "needs.determine_necessary_jobs.outputs.image-utility-needs-building == 'true'"
        env:
          TARBALL: image.tar.zst

      - name: Build package
        run: ./internal-scripts/ci-cd/build-rbenv-rpm/build-package.sh
        env:
          PACKAGE_BASENAME: "<%= rbenv_package_basename(:RPM) %>"
          REVISION: "<%= rbenv_package_revision %>"

      - name: Archive artifact
        uses: ./.github/actions/upload-artifact
        with:
          name: <%= rbenv_rpm_artifact_name %>
          path: output


  ### Ruby ###

  <%- distributions.each do |distribution| %>
  <%- ruby_package_versions.each do |ruby_package_version| -%>
  <%- unindent(2) do %>
    build_ruby_packages_<%= slug(distribution[:name]) %>-<%= slug(ruby_package_version[:id]) %>:
      name: 'Build Ruby packages [<%= distribution[:name] %>/<%= ruby_package_version[:id] %>]'
      needs:
        - 'determine_necessary_jobs'
        - 'build_jemalloc_binary_<%= slug(distribution[:name]) %>'
        - 'build_docker_image_<%= slug(distribution[:name]) %>'
        - 'build_docker_image_utility'
        <%- ruby_source_versions.each do |ruby_version| %>
        - 'download_ruby_source_<%= slug(ruby_version) %>'
        <%- end %>
      runs-on: ubuntu-18.04
      # Run even if a dependent job has been skipped
      if: |
        (
          <%- variants.each_with_index do |variant, i| %>
          <%= "|| " if i > 0 %>needs.determine_necessary_jobs.outputs.ruby-<%= slug(distribution[:name]) %>-<%= slug(ruby_package_version[:id]) %>-<%= slug(variant[:name]) %>-needs-building == 'true'
          <%- end %>
        )
        && !failure() && !cancelled()
      steps:
        - uses: actions/checkout@v2
        - name: Login to Google Cloud
          uses: ./.github/actions/gcloud-login
          with:
            private_key: ${{ secrets.GCLOUD_KEY }}
        - name: Fetch Ruby source
          uses: ./.github/actions/download-artifact
          with:
            name: <%= ruby_source_artifact_name(ruby_package_version[:full_version]) %>
            path: .

        - name: Download Docker image necessary for building
          uses: ./.github/actions/download-artifact
          if: "needs.determine_necessary_jobs.outputs.image-<%= slug(distribution[:name]) %>-needs-building == 'true'"
          with:
            name: 'docker-image-<%= distribution[:name] %>'
            path: .
        - name: Load Docker image necessary for building
          run: ./internal-scripts/ci-cd/load-docker-image.sh
          if: "needs.determine_necessary_jobs.outputs.image-<%= slug(distribution[:name]) %>-needs-building == 'true'"
          env:
            TARBALL: image.tar.zst

        - name: Download Docker image necessary for packaging
          uses: ./.github/actions/download-artifact
          if: "needs.determine_necessary_jobs.outputs.image-utility-needs-building == 'true'"
          with:
            name: 'docker-image-<%= distribution[:name] %>'
            path: .
        - name: Load Docker image necessary for packaging
          run: ./internal-scripts/ci-cd/load-docker-image.sh
          if: "needs.determine_necessary_jobs.outputs.image-utility-needs-building == 'true'"
          env:
            TARBALL: image.tar.zst

        <%- variants.each do |variant| %>
        <%- unindent(2) do -%>
          <% if variant[:name] == 'jemalloc' %>
          <%- unindent(2) do -%>
            - name: Fetch Jemalloc binary
              if: "needs.determine_necessary_jobs.outputs.ruby-<%= slug(distribution[:name]) %>-<%= slug(ruby_package_version[:id]) %>-<%= slug(variant[:name]) %>-needs-building == 'true'"
              uses: ./.github/actions/download-artifact
              with:
                name: jemalloc-bin-<%= distribution[:name] %>
                path: .
          <%- end -%>
          <% end %>

          - name: "[<%= variant[:name] %>] Reset & prepare workspace"
            if: "needs.determine_necessary_jobs.outputs.ruby-<%= slug(distribution[:name]) %>-<%= slug(ruby_package_version[:id]) %>-<%= slug(variant[:name]) %>-needs-building == 'true'"
            run: |
              rm -rf cache output ruby-bin.tar.gz
              mkdir -p cache
          - name: "[<%= variant[:name] %>] Fetch cache"
            if: "needs.determine_necessary_jobs.outputs.ruby-<%= slug(distribution[:name]) %>-<%= slug(ruby_package_version[:id]) %>-<%= slug(variant[:name]) %>-needs-building == 'true'"
            uses: actions/cache@v1
            with:
              path: cache
              key: ruby-bin-<%= ruby_package_version[:id] %>-<%= distribution[:name] %>-<%= variant[:name] %>

          - name: "[<%= variant[:name] %>] Build binaries"
            if: "needs.determine_necessary_jobs.outputs.ruby-<%= slug(distribution[:name]) %>-<%= slug(ruby_package_version[:id]) %>-<%= slug(variant[:name]) %>-needs-building == 'true'"
            run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
            env:
              ENVIRONMENT_NAME: "<%= distribution[:name] %>"
              VARIANT_NAME: "<%= variant[:name] %>"
              RUBY_PACKAGE_VERSION_ID: "<%= ruby_package_version[:id] %>"

          - name: "[<%= variant[:name] %>] Build package"
            if: "needs.determine_necessary_jobs.outputs.ruby-<%= slug(distribution[:name]) %>-<%= slug(ruby_package_version[:id]) %>-<%= slug(variant[:name]) %>-needs-building == 'true'"
            run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
            env:
              DISTRIBUTION_NAME: "<%= distribution[:name] %>"
              VARIANT_NAME: "<%= variant[:name] %>"
              VARIANT_PACKAGE_SUFFIX: "<%= variant[:package_suffix] %>"
              PACKAGE_FORMAT: "<%= distribution[:package_format] %>"
              RUBY_PACKAGE_VERSION_ID: "<%= ruby_package_version[:id] %>"
              RUBY_PACKAGE_REVISION: "<%= ruby_package_version[:package_revision] %>"

          - name: "[<%= variant[:name] %>] Archive package artifact to Google Cloud"
            if: "needs.determine_necessary_jobs.outputs.ruby-<%= slug(distribution[:name]) %>-<%= slug(ruby_package_version[:id]) %>-<%= slug(variant[:name]) %>-needs-building == 'true'"
            uses: ./.github/actions/upload-artifact
            with:
              name: "<%= ruby_package_artifact_name(ruby_package_version, distribution, variant) %>"
              path: output
        <%- end -%>
        <%- end %>
  <%- end %>
  <%- end -%>
  <%- end %>


  ### Publish all artifacts in Google Cloud as Github Actions artifacts ###

  publish_github_actions_artifacts:
    name: Publish artifacts to Github Actions
    needs:
      - determine_necessary_jobs
      - download_rbenv_source
      - build_common_deb
      - build_common_rpm
      - build_rbenv_deb
      - build_rbenv_rpm
      <%- ruby_source_versions.each do |ruby_version| %>
      - download_ruby_source_<%= slug(ruby_version) %>
      <%- end %>
      <%- distributions.each do |distribution| -%>
      <%- unindent(2) do %>
        - build_jemalloc_binary_<%= slug(distribution[:name]) %>
        <%- ruby_package_versions.each do |ruby_package_version| %>
        - build_ruby_packages_<%= slug(distribution[:name]) %>-<%= slug(ruby_package_version[:id]) %>
        <%- end %>
      <%- end %>
      <%- end -%>
    runs-on: ubuntu-20.04
    # Run even if a dependent job has been skipped
    if: '!failure() && !cancelled()'
    steps:
      - uses: actions/checkout@v2
      - name: Login to Google Cloud
        uses: ./.github/actions/gcloud-login
        with:
          private_key: ${{ secrets.GCLOUD_KEY }}

      - name: Download Rbenv source artifact from Google Cloud
        uses: ./.github/actions/download-artifact
        with:
          name: <%= rbenv_source_artifact_name %>
          path: artifacts
      - name: Archive Rbenv source artifact to Github
        uses: actions/upload-artifact@v2
        with:
          name: <%= rbenv_source_artifact_name %>
          path: artifacts
      - name: Clear artifacts directory
        run: rm -rf artifacts

      - name: Download common DEB artifact from Google Cloud
        uses: ./.github/actions/download-artifact
        with:
          name: <%= common_deb_artifact_name %>
          path: artifacts
      - name: Archive common DEB artifact to Github
        uses: actions/upload-artifact@v2
        with:
          name: <%= common_deb_artifact_name %>
          path: artifacts
      - name: Clear artifacts directory
        run: rm -rf artifacts

      - name: Download common RPM artifact from Google Cloud
        uses: ./.github/actions/download-artifact
        with:
          name: <%= common_rpm_artifact_name %>
          path: artifacts
      - name: Archive common RPM artifact to Github
        uses: actions/upload-artifact@v2
        with:
          name: <%= common_rpm_artifact_name %>
          path: artifacts
      - name: Clear artifacts directory
        run: rm -rf artifacts

      - name: Download Rbenv DEB artifact from Google Cloud
        uses: ./.github/actions/download-artifact
        with:
          name: <%= rbenv_deb_artifact_name %>
          path: artifacts
      - name: Archive Rbenv DEB artifact to Github
        uses: actions/upload-artifact@v2
        with:
          name: <%= rbenv_deb_artifact_name %>
          path: artifacts
      - name: Clear artifacts directory
        run: rm -rf artifacts

      - name: Download Rbenv RPM artifact from Google Cloud
        uses: ./.github/actions/download-artifact
        with:
          name: <%= rbenv_rpm_artifact_name %>
          path: artifacts
      - name: Archive Rbenv RPM artifact to Github
        uses: actions/upload-artifact@v2
        with:
          name: <%= rbenv_rpm_artifact_name %>
          path: artifacts
      - name: Clear artifacts directory
        run: rm -rf artifacts

      <%- docker_images.each do |image| %>
      <%- unindent(2) do -%>
        - name: Download Docker image artifact [<%= image[:id] %>] from Google Cloud
          uses: ./.github/actions/download-artifact
          if: needs.determine_necessary_jobs.outputs.image-<%= slug(image[:id]) %>-needs-building == 'true'
          with:
            name: 'docker-image-<%= image[:id] %>'
            path: artifacts
        - name: Archive Docker image artifact [<%= image[:id] %>] to Github
          uses: actions/upload-artifact@v2
          if: needs.determine_necessary_jobs.outputs.image-<%= slug(image[:id]) %>-needs-building == 'true'
          with:
            name: 'docker-image-<%= image[:id] %>'
            path: artifacts
        - name: Clear artifacts directory
          if: needs.determine_necessary_jobs.outputs.image-<%= slug(image[:id]) %>-needs-building == 'true'
          run: rm -rf artifacts
      <%- end -%>
      <%- end %>

      <%- ruby_source_versions.each do |ruby_version| %>
      <%- unindent(2) do -%>
        - name: Download Ruby source artifact [<%= ruby_version %>] from Google Cloud
          uses: ./.github/actions/download-artifact
          with:
            name: <%= ruby_source_artifact_name(ruby_version) %>
            path: artifacts
        - name: Archive Ruby source artifact [<%= ruby_version %>] to Github
          uses: actions/upload-artifact@v2
          with:
            name: <%= ruby_source_artifact_name(ruby_version) %>
            path: artifacts
        - name: Clear artifacts directory
          run: rm -rf artifacts
      <%- end -%>
      <%- end %>

      <%- distributions.each do |distribution| %>
      <%- unindent(2) do -%>
        - name: Download Jemalloc binary artifact [<%= distribution[:name] %>] from Google Cloud
          uses: ./.github/actions/download-artifact
          with:
            name: 'jemalloc-bin-<%= distribution[:name] %>'
            path: artifacts
        - name: Archive Jemalloc binary artifact [<%= distribution[:name] %>] to Github
          uses: actions/upload-artifact@v2
          with:
            name: 'jemalloc-bin-<%= distribution[:name] %>'
            path: artifacts
        - name: Clear artifacts directory
          run: rm -rf artifacts
      <%- end -%>
      <%- end %>

      <%- ruby_package_artifact_names.each do |artifact_name| %>
      <%- unindent(2) do -%>
        - name: Download Ruby package artifact [<%= artifact_name %>] from Google Cloud
          uses: ./.github/actions/download-artifact
          with:
            name: <%= artifact_name %>
            path: artifacts
        - name: Archive Ruby package artifact [<%= artifact_name %>] to Github
          uses: actions/upload-artifact@v2
          with:
            name: <%= artifact_name %>
            path: artifacts
        - name: Clear artifacts directory
          run: rm -rf artifacts
      <%- end -%>
      <%- end %>


  ### Create test APT/YUM repos ###

  create_test_apt_repo:
    name: Create test APT repo
    runs-on: ubuntu-18.04
    needs:
      - check_workflow_uptodate
      - check_version_numbers_need_bumping
    steps:
      - uses: actions/checkout@v2
      - name: Recreate repo
        run: ./internal-scripts/ci-cd/publish/recreate-apt-repo.sh
        env:
          BINTRAY_API_USERNAME: ${{ secrets.BINTRAY_API_USERNAME }}
          BINTRAY_API_KEY: ${{ secrets.BINTRAY_API_KEY }}
          REPO_NAME: fullstaq-ruby-apt-ci-${{ env.CI_ARTIFACTS_RUN_NUMBER }}


  create_test_yum_repo:
    name: Create test YUM repo
    needs:
      - check_workflow_uptodate
      - check_version_numbers_need_bumping
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Recreate repo
        run: ./internal-scripts/ci-cd/publish/recreate-yum-repo.sh
        env:
          BINTRAY_API_USERNAME: ${{ secrets.BINTRAY_API_USERNAME }}
          BINTRAY_API_KEY: ${{ secrets.BINTRAY_API_KEY }}
          REPO_NAME: fullstaq-ruby-yum-ci-${{ env.CI_ARTIFACTS_RUN_NUMBER }}


  ### Publish common and fullstaq-rbenv packages to test repos

  publish_common_and_rbenv_debs_test:
    name: Publish common and Rbenv DEBs to test repo
    needs:
      - determine_necessary_jobs
      - build_docker_image_utility
      - create_test_apt_repo
      - build_common_deb
      - build_rbenv_deb
    runs-on: ubuntu-18.04
    # Run even if a dependent job has been skipped
    if: '!failure() && !cancelled()'
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Login to Google Cloud
        uses: ./.github/actions/gcloud-login
        with:
          private_key: ${{ secrets.GCLOUD_KEY }}

      - name: Download common DEB
        uses: ./.github/actions/download-artifact
        with:
          name: <%= common_deb_artifact_name %>
          path: .
      - name: Download Rbenv DEB
        uses: ./.github/actions/download-artifact
        with:
          name: <%= rbenv_deb_artifact_name %>
          path: .

      - name: Download utility Docker image
        uses: ./.github/actions/download-artifact
        if: "needs.determine_necessary_jobs.outputs.image-utility-needs-building == 'true'"
        with:
          name: docker-image-utility
          path: .
      - name: Load utility Docker image
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: "needs.determine_necessary_jobs.outputs.image-utility-needs-building == 'true'"
        env:
          TARBALL: image.tar.zst

      - name: Determine latest release tag
        # Sets environment variable $LATEST_RELEASE_TAG
        run: ./internal-scripts/ci-cd/check-version-numbers-need-changing/determine-latest-release-tag.sh
      - name: Determine Bintray repository package version
        # Sets environment variable $REPO_PACKAGE_VERSION
        run: ./internal-scripts/ci-cd/publish/determine-repo-package-version.sh

      - name: Upload to repo
        run: ./internal-scripts/ci-cd/publish/publish-debs.sh *.deb
        env:
          BINTRAY_API_USERNAME: ${{ secrets.BINTRAY_API_USERNAME }}
          BINTRAY_API_KEY: ${{ secrets.BINTRAY_API_KEY }}
          REPO_NAME: fullstaq-ruby-apt-ci-${{ env.CI_ARTIFACTS_RUN_NUMBER }}
          DRY_RUN: false
          IGNORE_EXISTING: false


  publish_common_and_rbenv_rpms_test:
    name: Publish common and Rbenv RPMs to test repo
    needs:
      - determine_necessary_jobs
      - build_docker_image_utility
      - create_test_yum_repo
      - build_common_rpm
      - build_rbenv_rpm
    runs-on: ubuntu-18.04
    # Run even if a dependent job has been skipped
    if: '!failure() && !cancelled()'
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Login to Google Cloud
        uses: ./.github/actions/gcloud-login
        with:
          private_key: ${{ secrets.GCLOUD_KEY }}

      - name: Download common RPM
        uses: ./.github/actions/download-artifact
        with:
          name: <%= common_rpm_artifact_name %>
          path: .
      - name: Download Rbenv RPM
        uses: ./.github/actions/download-artifact
        with:
          name: <%= rbenv_rpm_artifact_name %>
          path: .

      - name: Download utility Docker image
        uses: ./.github/actions/download-artifact
        if: "needs.determine_necessary_jobs.outputs.image-utility-needs-building == 'true'"
        with:
          name: docker-image-utility
          path: .
      - name: Load utility Docker image
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: "needs.determine_necessary_jobs.outputs.image-utility-needs-building == 'true'"
        env:
          TARBALL: image.tar.zst

      - name: Determine latest release tag
        # Sets environment variable $LATEST_RELEASE_TAG
        run: ./internal-scripts/ci-cd/check-version-numbers-need-changing/determine-latest-release-tag.sh
      - name: Determine Bintray repository package version
        # Sets environment variable $REPO_PACKAGE_VERSION
        run: ./internal-scripts/ci-cd/publish/determine-repo-package-version.sh

      - name: Upload to repo
        run: ./internal-scripts/ci-cd/publish/publish-rpms.sh *.rpm
        env:
          BINTRAY_API_USERNAME: ${{ secrets.BINTRAY_API_USERNAME }}
          BINTRAY_API_KEY: ${{ secrets.BINTRAY_API_KEY }}
          REPO_NAME: fullstaq-ruby-yum-ci-${{ env.CI_ARTIFACTS_RUN_NUMBER }}
          DRY_RUN: false
          IGNORE_EXISTING: false


  ### Publish Ruby packages to test repos

  publish_ruby_packages_test:
    name: Publish Ruby packages to test repo
    needs:
      - determine_necessary_jobs
      - build_docker_image_utility
      - create_test_apt_repo
      - create_test_yum_repo
      - build_common_deb
      - build_rbenv_deb
      - build_common_rpm
      - build_rbenv_rpm
      <%- distributions.each do |distribution| -%>
      <%- ruby_package_versions.each do |ruby_package_version| %>
      - build_ruby_packages_<%= slug(distribution[:name]) %>-<%= slug(ruby_package_version[:id]) %>
      <%- end %>
      <%- end -%>
    runs-on: ubuntu-18.04
    # Run even if a dependent job has been skipped
    if: '!failure() && !cancelled()'
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Login to Google Cloud
        uses: ./.github/actions/gcloud-login
        with:
          private_key: ${{ secrets.GCLOUD_KEY }}

      <%- ruby_package_artifact_names.each do |artifact_name| %>
      <%- unindent(2) do -%>
        - name: Fetch <%= artifact_name %>
          uses: ./.github/actions/download-artifact
          with:
            name: <%= artifact_name %>
            path: ruby-pkgs
      <%- end -%>
      <%- end %>

      - name: Download Docker image necessary for testing
        uses: ./.github/actions/download-artifact
        if: "needs.determine_necessary_jobs.outputs.image-utility-needs-building == 'true'"
        with:
          name: docker-image-utility
          path: .
      - name: Load Docker image necessary for testing
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: "needs.determine_necessary_jobs.outputs.image-utility-needs-building == 'true'"
        env:
          TARBALL: image.tar.zst

      - name: Determine latest release tag
        # Sets environment variable $LATEST_RELEASE_TAG
        run: ./internal-scripts/ci-cd/check-version-numbers-need-changing/determine-latest-release-tag.sh
      - name: Determine Bintray repository package version
        # Sets environment variable $REPO_PACKAGE_VERSION
        run: ./internal-scripts/ci-cd/publish/determine-repo-package-version.sh

      - name: Upload DEBs to repo
        run: ./internal-scripts/ci-cd/publish/publish-debs.sh ruby-pkgs/*.deb
        env:
          BINTRAY_API_USERNAME: ${{ secrets.BINTRAY_API_USERNAME }}
          BINTRAY_API_KEY: ${{ secrets.BINTRAY_API_KEY }}
          REPO_NAME: fullstaq-ruby-apt-ci-${{ env.CI_ARTIFACTS_RUN_NUMBER }}
          DRY_RUN: false
          IGNORE_EXISTING: false
      - name: Upload RPMs to repo
        run: ./internal-scripts/ci-cd/publish/publish-rpms.sh ruby-pkgs/*.rpm
        env:
          BINTRAY_API_USERNAME: ${{ secrets.BINTRAY_API_USERNAME }}
          BINTRAY_API_KEY: ${{ secrets.BINTRAY_API_KEY }}
          REPO_NAME: fullstaq-ruby-yum-ci-${{ env.CI_ARTIFACTS_RUN_NUMBER }}
          DRY_RUN: false
          IGNORE_EXISTING: false

  commit_published_packages_test:
    name: Commit packages published to test repo
    needs:
      - publish_common_and_rbenv_debs_test
      - publish_common_and_rbenv_rpms_test
      - publish_ruby_packages_test
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Determine latest release tag
        # Sets environment variable $LATEST_RELEASE_TAG
        run: ./internal-scripts/ci-cd/check-version-numbers-need-changing/determine-latest-release-tag.sh
      - name: Determine Bintray repository package version
        # Sets environment variable $REPO_PACKAGE_VERSION
        run: ./internal-scripts/ci-cd/publish/determine-repo-package-version.sh

      - name: Commit files published to APT repo
        run: ./internal-scripts/ci-cd/publish/commit-published-packages.sh
        env:
          BINTRAY_API_USERNAME: ${{ secrets.BINTRAY_API_USERNAME }}
          BINTRAY_API_KEY: ${{ secrets.BINTRAY_API_KEY }}
          REPO_NAME: fullstaq-ruby-apt-ci-${{ env.CI_ARTIFACTS_RUN_NUMBER }}

      - name: Commit files published to YUM repo
        run: ./internal-scripts/ci-cd/publish/commit-published-packages.sh
        env:
          BINTRAY_API_USERNAME: ${{ secrets.BINTRAY_API_USERNAME }}
          BINTRAY_API_KEY: ${{ secrets.BINTRAY_API_KEY }}
          REPO_NAME: fullstaq-ruby-yum-ci-${{ env.CI_ARTIFACTS_RUN_NUMBER }}


  ### Test packages against test repos ###

  # The Github Actions matrix is limited to producing 256 jobs. Given the
  # combinatorial explosion, it's very easy to reach that limit, so we
  # preprocess distribution information using ERB templating instead.
  <%- distributions_with_test_image_info.each do |distribution| %>
  <%- unindent(2) do %>
    test_packages_against_test_<%= slug(distribution[:name]) %>:
      name: 'Test Ruby packages against test repos [<%= distribution[:name] %>]'
      needs: commit_published_packages_test
      runs-on: ubuntu-18.04
      strategy:
        max-parallel: 4 # avoid overloading Bintray
        matrix:
          ruby_package_version: <%=indentyaml ruby_package_versions %>
          variant: <%=indentyaml variants %>
      steps:
        - uses: actions/checkout@v2
        - name: Run tests
          run: ./internal-scripts/ci-cd/test-packages/run-tests.sh
          env:
            DISTRIBUTION_NAME: "<%= distribution[:name] %>"
            RUBY_PACKAGE_ID: ${{ matrix.ruby_package_version.id }}
            PACKAGE_FORMAT: "<%= distribution[:package_format] %>"
            VARIANT_NAME: ${{ matrix.variant.name }}
            VARIANT_PACKAGE_SUFFIX: ${{ matrix.variant.package_suffix }}
            TEST_IMAGE_NAME: "<%= distribution[:test_image] %>"
            APT_REPO_URL: https://dl.bintray.com/fullstaq/fullstaq-ruby-apt-ci-${{ env.CI_ARTIFACTS_RUN_NUMBER }}
            YUM_REPO_URL: https://dl.bintray.com/fullstaq/fullstaq-ruby-yum-ci-${{ env.CI_ARTIFACTS_RUN_NUMBER }}
  <%- end %>
  <%- end %>


  ### Publish packages to production repo ###

  publish_packages_production:
    name: Publish packages to production repos
    needs:
      - determine_necessary_jobs
      <%- distributions.each do |distribution| -%>
      - 'test_packages_against_test_<%= slug(distribution[:name]) %>'
      <%- end -%>
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Login to Google Cloud
        uses: ./.github/actions/gcloud-login
        with:
          private_key: ${{ secrets.GCLOUD_KEY }}

      - name: Download fullstaq-common DEB
        uses: ./.github/actions/download-artifact
        with:
          name: <%= common_deb_artifact_name %>
          path: .
      - name: Download fullstaq-common RPM
        uses: ./.github/actions/download-artifact
        with:
          name: <%= common_rpm_artifact_name %>
          path: .
      - name: Download Rbenv DEB
        uses: ./.github/actions/download-artifact
        with:
          name: <%= rbenv_deb_artifact_name %>
          path: .
      - name: Download Rbenv RPM
        uses: ./.github/actions/download-artifact
        with:
          name: <%= rbenv_rpm_artifact_name %>
          path: .

      <%- ruby_package_artifact_names.each do |artifact_name| %>
      <%- unindent(2) do -%>
        - name: Fetch <%= artifact_name %>
          uses: ./.github/actions/download-artifact
          with:
            name: <%= artifact_name %>
            path: .
      <%- end -%>
      <%- end %>

      - name: Download Docker image necessary for publishing
        uses: ./.github/actions/download-artifact
        if: "needs.determine_necessary_jobs.outputs.image-utility-needs-building == 'true'"
        with:
          name: docker-image-utility
          path: .
      - name: Load Docker image necessary for publishing
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: "needs.determine_necessary_jobs.outputs.image-utility-needs-building == 'true'"
        env:
          TARBALL: image.tar.zst

      - name: Determine latest release tag
        # Sets environment variable $LATEST_RELEASE_TAG
        run: ./internal-scripts/ci-cd/check-version-numbers-need-changing/determine-latest-release-tag.sh
      - name: Determine Bintray repository package version
        # Sets environment variable $REPO_PACKAGE_VERSION
        run: ./internal-scripts/ci-cd/publish/determine-repo-package-version.sh

      - name: Upload DEBs to repo
        run: ./internal-scripts/ci-cd/publish/publish-debs.sh *.deb
        env:
          BINTRAY_API_USERNAME: ${{ secrets.BINTRAY_API_USERNAME }}
          BINTRAY_API_KEY: ${{ secrets.BINTRAY_API_KEY }}
          REPO_NAME: fullstaq-ruby-apt
          DRY_RUN: ${{ github.ref != 'refs/heads/main' }}
          IGNORE_EXISTING: true

      - name: Commit files published to APT repo
        run: ./internal-scripts/ci-cd/publish/commit-published-packages.sh
        env:
          BINTRAY_API_USERNAME: ${{ secrets.BINTRAY_API_USERNAME }}
          BINTRAY_API_KEY: ${{ secrets.BINTRAY_API_KEY }}
          REPO_NAME: fullstaq-ruby-apt

      - name: Upload RPMs to repo
        run: ./internal-scripts/ci-cd/publish/publish-rpms.sh *.rpm
        env:
          BINTRAY_API_USERNAME: ${{ secrets.BINTRAY_API_USERNAME }}
          BINTRAY_API_KEY: ${{ secrets.BINTRAY_API_KEY }}
          REPO_NAME: fullstaq-ruby-yum
          DRY_RUN: ${{ github.ref != 'refs/heads/main' }}
          IGNORE_EXISTING: true

      - name: Commit files published to YUM repo
        run: ./internal-scripts/ci-cd/publish/commit-published-packages.sh
        env:
          BINTRAY_API_USERNAME: ${{ secrets.BINTRAY_API_USERNAME }}
          BINTRAY_API_KEY: ${{ secrets.BINTRAY_API_KEY }}
          REPO_NAME: fullstaq-ruby-yum


  ### Test packages against production repos ###

  # The Github Actions matrix is limited to producing 256 jobs. Given the
  # combinatorial explosion, it's very easy to reach that limit, so we
  # preprocess distribution information using ERB templating instead.
  <%- distributions_with_test_image_info.each do |distribution| %>
  <%- unindent(2) do -%>
    test_packages_against_production_<%= slug(distribution[:name]) %>:
      name: 'Test Ruby packages against production repos [<%= distribution[:name] %>]'
      needs: publish_packages_production
      if: github.ref == 'refs/heads/main'
      runs-on: ubuntu-18.04
      strategy:
        max-parallel: 4 # avoid overloading Bintray
        matrix:
          ruby_package_version: <%=indentyaml ruby_package_versions %>
          variant: <%=indentyaml variants %>
      steps:
        - uses: actions/checkout@v2
        - name: Run tests
          run: ./internal-scripts/ci-cd/test-packages/run-tests.sh
          env:
            DISTRIBUTION_NAME: "<%= distribution[:name] %>"
            RUBY_PACKAGE_ID: ${{ matrix.ruby_package_version.id }}
            PACKAGE_FORMAT: "<%= distribution[:package_format] %>"
            VARIANT_NAME: ${{ matrix.variant.name }}
            VARIANT_PACKAGE_SUFFIX: ${{ matrix.variant.package_suffix }}
            TEST_IMAGE_NAME: "<%= distribution[:test_image] %>"
            APT_REPO_URL: https://apt.fullstaqruby.org
            YUM_REPO_URL: https://yum.fullstaqruby.org
  <%- end %>
  <%- end %>


  ### Create Git tag ###

  create_git_tag:
    name: Create Git tag
    needs:
      <%- distributions.each do |distribution| -%>
      - 'test_packages_against_production_<%= slug(distribution[:name]) %>'
      <%- end -%>
    # Run even if a dependent job has been skipped
    if: '!failure() && !cancelled()'
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.6'

      - name: Determine latest release version
        # Sets environment variable $LATEST_RELEASE_TAG
        run: ./internal-scripts/ci-cd/check-version-numbers-need-changing/determine-latest-release-tag.sh

      - name: Determine next epic version
        # Sets environment variable $NEXT_RELEASE_VERSION
        run: ./internal-scripts/ci-cd/create-git-tag/determine-next-epic-version.sh

      - name: Create Git tag
        run: git tag epic-${{ env.NEXT_RELEASE_VERSION }}

      - name: Push Git tag
        if: github.ref == 'refs/heads/main'
        run: git push origin epic-${{ env.NEXT_RELEASE_VERSION }}
